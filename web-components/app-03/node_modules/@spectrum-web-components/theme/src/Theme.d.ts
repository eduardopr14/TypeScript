import { CSSResult } from '@spectrum-web-components/base';
declare global {
    interface Window {
        ShadyCSS: {
            nativeShadow: boolean;
            prepareTemplate(template: HTMLTemplateElement, elementName: string, typeExtension?: string): void;
            styleElement(host: HTMLElement): void;
            ScopingShim: {
                prepareAdoptedCssText(cssTextArray: string[], elementName: string): void;
            };
        };
    }
    interface ShadowRoot {
        adoptedStyleSheets?: CSSStyleSheet[];
    }
}
declare type FragmentType = 'color' | 'scale' | 'core';
declare type SettableFragmentTypes = 'color' | 'scale';
declare type FragmentMap = Map<string, {
    name: string;
    styles: CSSResult;
}>;
export declare type ThemeFragmentMap = Map<FragmentType, FragmentMap>;
export declare type Color = 'light' | 'lightest' | 'dark' | 'darkest';
export declare type Scale = 'medium' | 'large';
declare type FragmentName = Color | Scale | 'core';
export interface ThemeData {
    color?: Color;
    scale?: Scale;
}
declare type ThemeKindProvider = {
    [P in SettableFragmentTypes]: Color | Scale | '';
};
export declare class Theme extends HTMLElement implements ThemeKindProvider {
    private hasAdoptedStyles;
    private static themeFragmentsByKind;
    private static defaultFragments;
    private static templateElement?;
    private static instances;
    static get observedAttributes(): string[];
    protected attributeChangedCallback(attrName: SettableFragmentTypes, old: string | null, value: string | null): void;
    private requestUpdate;
    shadowRoot: ShadowRoot;
    get core(): 'core';
    private _color;
    get color(): Color | '';
    set color(newValue: Color | '');
    private _scale;
    get scale(): Scale | '';
    set scale(newValue: Scale | '');
    private get styles();
    private static get template();
    constructor();
    private onQueryTheme;
    protected connectedCallback(): void;
    protected disconnectedCallback(): void;
    private observer;
    startManagingContentDirection(el: HTMLElement): void;
    stopManagingContentDirection(el: HTMLElement): void;
    private trackedChildren;
    private shouldAdoptStyles;
    private get expectedFragments();
    protected adoptStyles(): void;
    static registerThemeFragment(name: FragmentName, kind: FragmentType, styles: CSSResult): void;
}
export {};
